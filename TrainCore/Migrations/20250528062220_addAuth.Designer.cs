// <auto-generated />
using System;
using DomainTrain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DomainTrain.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250528062220_addAuth")]
    partial class addAuth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainTrain.model.Activeuser", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("cvpath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Activeusers");
                });

            modelBuilder.Entity("DomainTrain.model.Activity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DomainTrain.model.Course", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Trainer_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("end_time")
                        .HasColumnType("time");

                    b.Property<DateTime>("reg_end_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("reg_start_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("start_time")
                        .HasColumnType("time");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("work_day")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Trainer_id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DomainTrain.model.Courseregistration", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Course_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("activeuser_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("registration_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("submission_date")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("Course_id");

                    b.HasIndex("activeuser_id");

                    b.ToTable("Courseregistrations");
                });

            modelBuilder.Entity("DomainTrain.model.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("experience_level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("expirydate")
                        .HasColumnType("datetime2");

                    b.Property<string>("jobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salaryRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("DomainTrain.model.Suggestions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActiveUser_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("submission_date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActiveUser_id");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("DomainTrain.model.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("DomainTrain.model.Course", b =>
                {
                    b.HasOne("DomainTrain.model.Trainer", "Trainer")
                        .WithMany("Course")
                        .HasForeignKey("Trainer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainTrain.model.Courseregistration", b =>
                {
                    b.HasOne("DomainTrain.model.Course", "Course")
                        .WithMany("registration")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainTrain.model.Activeuser", "user")
                        .WithMany("Courseregistration")
                        .HasForeignKey("activeuser_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainTrain.model.Suggestions", b =>
                {
                    b.HasOne("DomainTrain.model.Activeuser", "user")
                        .WithMany("Suggestions")
                        .HasForeignKey("ActiveUser_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
